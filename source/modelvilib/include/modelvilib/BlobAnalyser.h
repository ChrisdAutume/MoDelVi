/* 
 * File:   BlobAnalyser.h
 * Author: chris
 *
 * Created on 6 mai 2015, 01:12
 */

#ifndef BLOBANALYSER_H
#define	BLOBANALYSER_H

#include <modelvilib/AbstractAnalyser.h>
#include <yarp/os/Bottle.h>

#include <modelvilib/BlobMatch.h>
#include <modelvilib/MotionMatch.h>
#include <modelvilib/ColorFilter.h>
#include <modelvilib/YarpPort.h>

/*! \namespace MoDelVi
 * 
 * Lib namespace.
 */
namespace MoDelVi
{

    namespace Analyse
    {
        /*!
         @class BlobAnalyser
         @brief Blob analyser using color filter
         */
        class MODELVI_API BlobAnalyser: public AbstractAnalyser
        {
        protected:
            cv::Mat m_matResult;
            
            //! Current matches.
            std::vector<BlobMatch*> m_match;
            //! Last frame matches
            std::vector<BlobMatch*> m_lastMatch;
            
            //! Current motion detection
            std::vector<MotionMatch*> m_motionMatch;
            
            /*!
             Analyse the motion between the current frames and the last one (t-1). Basic detection detection small movement of the blob.
             @return list of the BlobMatch generated by the algorythme
             */
            std::vector<BlobMatch*> basicMotionDetection();
            
            //! Proceed on the analyse on all ColorFilter color.
            void proceedOnAllColor();
            /*!
             Analyse on the image
             @param image Input image, the algorithme only can work on color filtered image.
             */
            void detectBlob(Acquisition::ColorFilter* image);
            
        public:
            BlobAnalyser();
            ~BlobAnalyser();
            
            /*!
             Permit to send and get the matches throught the YARP network
             @param output YarpPort Instance of the output YARP port
             @return The list of the matches in the Bottle format. Matches already sent !
             */
            std::vector<yarp::os::Bottle> getBottleResult(Yarp::YarpPort& outport);
            
            //! @return Image generated with the matches of the algorithme.
            cv::Mat* getResultMat();
            
            //! proceed of the processing of the imge.
            virtual void proceed();
            
            /*!
             proceed of the processsing of a specific image
             @param Image to be processed
             */
            virtual void proceed(Acquisition::AbstractImage* img);

        };
    }
    
}

#endif	/* BLOBANALYSER_H */

